#include "stdafx.h"
#include "JDA.h"


JDA::JDA(){}
JDA::JDA(const _Parameters& pm){_pm = pm;}
JDA::~JDA(){}

void JDA::train(const _MyData* md)
{
	//We need checkout positive samples and generate negative samples
	//关于负样本的抽取，方法为在场景图片中随机生成框，然后把meanshape投影进去，框的大小和位置参数为场景图片长宽的某个比例的随机值

	std::vector<_NegBBox> nbb = GeNegSamp(_pm._nn);
	




	//Train
	for (uint16 t = 0; t < _pm._T; t++)//Foreach Stage（Cascade）
	{
		for (uint32 k = 0; k < _pm._K; k++)//Foreach weak classifier (Binary Tree)
		{


		}
	}

}

std::vector<_NegBBox> JDA::GeNegSamp(const int num)
{
	time_t current_time;
	current_time = time(0);
	cv::RNG rd(current_time);

	std::vector<_NegBBox> nb(num);

	for (uint32 i = 0; i < num; ++i)
	{
		/* code */
		_NegBBox bbox;
		bbox.index = rd.uniform(0, path.size() - 1); //Selecting a sample from negative set randomly
		bbox.x = rd.uniform(0.2, 0.8);
		bbox.y = rd.uniform(0.2, 0.8);
		bbox.width = rd.uniform(0.2, 0.5);
		bbox.heigth = rd.uniform(0.2, 0.5);

		nb.pushback(bbox);
	}

	ScaleVec<_NegBBox>(nb);

	return nb;
}
